services:
  postgis:
    image: postgis/postgis:16-3.4
    restart: unless-stopped
    env_file:
      - .env
      - .env.prod
    ports:
      - ${PRODUCTION_DOCKER_POSTGIS_FORWARDED_PORT}:5432
    volumes: 
      - production-postgis-data:/var/lib/postgresql/data

    #to ckeck if postgres is already ready. It is used in the depends_on section
    #of the services that use this service
    healthcheck:
        test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
      - postgis

  pgadmin4:
    image: dpage/pgadmin4:8.3
    env_file:
      - .env
      - .env.prod
    volumes:
      - ./pgadmin4-prod/data:/var/lib/pgadmin
      - ./pgadmin4-prod/servers/servers.json:/pgadmin4/servers.json
    ports:
      - ${PRODUCTION_PGADMIN4_FORWARDED_PORT}:80
    restart: unless-stopped
    networks:
      - postgis
    depends_on:
      postgis:
        condition: service_healthy

  djdesweb:
    restart: unless-stopped
    build: ./djdesweb
    command: gunicorn djdesweb.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - ./djdesweb:/usr/src/app
    ports:
      - ${PRODUCTION_DOCKER_DJANGO_API_FORWARDED_PORT}:8000
    env_file:
      - .env
      - .env.prod
    networks:
      - postgis

    #to ckeck if postgres is already ready. This service
    #will not start up to the posgis service is ready
    depends_on:
      postgis:
        condition: service_healthy
networks:
   postgis:
      driver: bridge

volumes:
  production-postgis-data:
    driver: local
